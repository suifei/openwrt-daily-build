name: Build OpenWrt (Official)

on:
  push:
    branches: 
      - main
#   schedule:
#     - cron: '0 0 * * *'
  
jobs:

  build:
    runs-on: ubuntu-20.04
    
    steps:

    - name: Checkout
      uses: actions/checkout@main
      
    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        set +e
        sudo timedatectl set-timezone "Asia/Shanghai"
        docker rmi `docker images -q`
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean

    - name: Downloading OpenWrt
      run: |
        git clone https://github.com/openwrt/openwrt.git openwrt
        cd openwrt
        
    - name: Copy Configs
      env:
        DEVICE_CONFIG: ${{ matrix.config }}.config
        FEEDS_CONFIG: ${{ matrix.config }}_feeds.config
      run: |
        cd openwrt
        cp ../configs/$DEVICE_CONFIG .config
        cat ../configs/$FEEDS_CONFIG > feeds.conf.default
        echo "show feeds:"
        cat ./feeds.conf.default
        echo "Compile config:"
        cat ./.config
      
    - name: Update Feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Make Defconfig
      run: |
        cd openwrt
        make defconfig
        
    - name: Download Packages
      run: |
        cd openwrt
        make download -j$(nproc)
        
    - name: Compile Firmware
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
    
    - name: Check space usage
      if: (!cancelled())
      run: |
        cd openwrt
        echo "======================="
        echo "Space usage:"
        echo "======================="
        df -h
        echo "======================="
        du -h ./ --max-depth=1
        du -h ~/openwrt/ --max-depth=1 || true
        
        # Prepare artifact
        mkdir -p ./artifact/firmware
        mkdir -p ./artifact/package
        mkdir -p ./artifact/buildinfo
        rm -rf $(find ./bin/targets/ -type d -name "packages")
        cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
        cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
        cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
        
        # Deliver buildinfo
        ls ./artifact/buildinfo/
        
        # Deliver package
        ls ./artifact/package/
        
        # Deliver firmware
        ls ./bin/targets/
        
        # Upload release asset
        ls ./artifact/firmware/*

    - name: Upload Artifact
      uses: actions/upload-artifact@main
      if: success()
      with:
        name: OpenWrt_firmware_${{ matrix.config }}_$(date +"%Y%m%d%H%M")
        path: openwrt/artifact

    strategy:
      fail-fast: false
      matrix:
        config: [xiaomi_ax9000,xiaomi_ax6s,x86_64]